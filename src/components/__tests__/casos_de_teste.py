# -*- coding: utf-8 -*-
"""Casos de teste.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oJD5NnV_TTW52WCvtr6LdmEN7Jfp1Y2H

**Este código foi desenvolvido para gerar casos de testes combinatórios para o trabalho final da disciplina de SSC0961 - Desenvolvimento Web e Mobile.**
"""

import pandas as pd
import numpy as np
import datetime
from faker import Faker # gerar dados falsos realistas
import random
import csv

# Nomes dos campos a serem testados
casos_teste_validos = pd.DataFrame(columns=["nome", "prioridade", "data", "tipo", "periodicidade", "periodicidadeValor", "detalhes"])
casos_teste_invalidos = pd.DataFrame(columns=["nome", "prioridade", "data", "tipo", "periodicidade", "periodicidadeValor", "detalhes"])
casos_teste_validos

# Inicializar o Faker
fake = Faker('pt_BR')

# Configurações específicas
prioridades = ["Urgente", "Importante", "Lembrar", "Sem Urgência"]
tipos = ["Profissional", "Pessoal", "Saúde", "Educacional", "Projetos", "Outros"]
periodicidades_fixas = ["Não se repete", "A cada dia", "A cada semana", "A cada mês", "A cada semestre", "A cada ano"]
periodicidades_todas = periodicidades_fixas + ["Outro (personalizado)"]

def gerar_nomes():
    tipo = random.choice(["curta", "média", "longa"])
    if tipo == "curta":
        return fake.sentence(nb_words=5)
    elif tipo == "média":
        return fake.text(max_nb_chars=25)
    else:
        return fake.text(max_nb_chars=60)

def gerar_periodicidade():
    escolha = random.choice(periodicidades_todas)
    if escolha == "Outro (personalizado)":
        return str(random.randint(1, 365))  # somente números > 0
    return escolha

def gerar_detalhes():
    tipo = random.choice(["vazia", "curta", "média", "longa"])
    if tipo == "vazia":
        return " "
    elif tipo == "curta":
        return fake.sentence(nb_words=4)
    elif tipo == "média":
        return fake.text(max_nb_chars=80)
    else:
        return fake.text(max_nb_chars=200)

# Geração dos dados
dados = []
for _ in range(10_000):  # Número de linhas desejado
    linha = {
        "nome": gerar_nomes(),
        "prioridade": random.choice(prioridades),
        "data": fake.date_between(start_date='today', end_date='+365d').strftime("%d/%m/%Y"),
        "tipo": random.choice(tipos),
        "periodicidade": gerar_periodicidade(),
        "detalhes": gerar_detalhes()
    }
    dados.append(linha)

# Criar DataFrame
df_validos = pd.DataFrame(dados, columns=["nome", "prioridade", "data", "tipo", "periodicidade", "detalhes"])

df_validos

fake = Faker('pt_BR')

# Valores inválidos
prioridades_invalidas = ["ABC", None, 123]
tipos_invalidos = [None, "Lazer", 999]
periodicidades_invalidas = [None, "Sempre", -1, 0, "Outro (personalizado)", "Outro (personalizado) com texto"]
datas_invalidas = ["32/13/9999", "2025/12/31", None, "31-02-1111", "aaaa/mm/dd"]

def gerar_nome_invalido():
    return random.choice([None, 123, fake.random_int()])  # Nomes inválidos

def gerar_detalhes_invalidos():
    return random.choice([None, 9999, True])  # Detalhes fora do esperado

# Criar dados inválidos
dados_invalidos = []
for _ in range(10_000):
    linha = {
        "nome": gerar_nome_invalido(),
        "prioridade": random.choice(prioridades_invalidas),
        "data": random.choice(datas_invalidas),
        "tipo": random.choice(tipos_invalidos),
        "periodicidade": random.choice(periodicidades_invalidas),
        "detalhes": gerar_detalhes_invalidos()
    }
    dados_invalidos.append(linha)

# DataFrame de testes inválidos
df_invalidos = pd.DataFrame(dados_invalidos, columns=["nome", "prioridade", "data", "tipo", "periodicidade", "detalhes"])
df_invalidos

df_validos.to_csv("casos_teste_combinatorio_validos.csv", index=False, encoding="utf-8-sig")
df_invalidos.to_csv("casos_teste_combinatorio_invalidos.csv", index=False, encoding="utf-8-sig")